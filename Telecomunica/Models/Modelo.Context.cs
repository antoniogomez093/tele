//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Telecomunica.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Role> Role { get; set; }
    
        public virtual int insertar_persona(string nombre, string apellido, Nullable<long> dpi, string fecha_nacimiento, string username, string password, Nullable<int> idrole)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var dpiParameter = dpi.HasValue ?
                new ObjectParameter("dpi", dpi) :
                new ObjectParameter("dpi", typeof(long));
    
            var fecha_nacimientoParameter = fecha_nacimiento != null ?
                new ObjectParameter("fecha_nacimiento", fecha_nacimiento) :
                new ObjectParameter("fecha_nacimiento", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));

            var idroleParameter = idrole.HasValue ?
                new ObjectParameter("idrole", idrole) :
                new ObjectParameter("idrole", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_persona", nombreParameter, apellidoParameter, dpiParameter, fecha_nacimientoParameter, usernameParameter, passwordParameter, idroleParameter);
        }

        public virtual int insertar_role(string role)
        {
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_role", roleParameter);
        }
    
        public virtual ObjectResult<string> leer(Nullable<int> idrole)
        {
            var idroleParameter = idrole.HasValue ?
                new ObjectParameter("idrole", idrole) :
                new ObjectParameter("idrole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("leer", idroleParameter);
        }
    }
}
